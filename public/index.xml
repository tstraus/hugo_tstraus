<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tstraus</title>
    <link>http://tstra.us/index.xml</link>
    <description>Recent content on tstraus</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>be nice</copyright>
    <lastBuildDate>Sun, 13 Nov 2016 15:49:00 -0400</lastBuildDate>
    <atom:link href="http://tstra.us/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Counter</title>
      <link>http://tstra.us/misc/counter/</link>
      <pubDate>Sun, 13 Nov 2016 15:49:00 -0400</pubDate>
      
      <guid>http://tstra.us/misc/counter/</guid>
      <description>&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;../../css/material.min.css&#34;&gt;
&lt;script src=&#34;../../scripts/material.min.js&#34;&gt;&lt;/script&gt;
&lt;link rel=&#34;stylesheet&#34; href=&#34;https://fonts.googleapis.com/icon?family=Material+Icons&#34;&gt;&lt;/p&gt;

&lt;h1 class=&#34;output&#34; id =&#34;output&#34;&gt;0&lt;/h1&gt;

&lt;p&gt;&lt;button id=&#34;button&#34; onclick=&#34;increment()&#34; class=&#34;mdl-color--green mdl-button mdl-js-button mdl-button--fab mdl-js-ripple-effect mdl-button--colored&#34;&gt;
    &lt;i class=&#34;material-icons&#34;&gt;add&lt;/i&gt;
&lt;/button&gt;&lt;/p&gt;

&lt;p&gt;&lt;button id=&#34;clear&#34; onclick=&#34;reset()&#34; class=&#34;mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect&#34;&gt;
    Clear
&lt;/button&gt;&lt;/p&gt;

&lt;script src=&#34;../../scripts/counter.js&#34; type=&#34;text/javascript&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Go</title>
      <link>http://tstra.us/misc/go/</link>
      <pubDate>Sat, 28 May 2016 16:59:37 -0400</pubDate>
      
      <guid>http://tstra.us/misc/go/</guid>
      <description>&lt;p&gt;&lt;object data=&#34;../../images/goBoard.svg&#34; type=&#34;image/svg+xml&#34; id=&#34;board&#34; width=&#34;100%&#34; height=&#34;100%&#34;&gt;&lt;/object&gt;
&lt;script src=&#34;../../scripts/go.js&#34; type=&#34;text/javascript&#34;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fountain Pen</title>
      <link>http://tstra.us/drawings/fountainPen/</link>
      <pubDate>Sat, 21 May 2016 20:04:48 -0400</pubDate>
      
      <guid>http://tstra.us/drawings/fountainPen/</guid>
      <description>&lt;p&gt;These are a few of my attempts at using a fountain pen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../images/drawings/fountainPen/jennie.jpg&#34; alt=&#34;Jennie&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;../../images/drawings/fountainPen/jennieFace.jpeg&#34; alt=&#34;Jennie&#39;s Face&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;../../images/drawings/fountainPen/jennieBed.jpeg&#34; alt=&#34;Jennie Bed&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;../../images/drawings/fountainPen/stare.jpeg&#34; alt=&#34;Stare&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;../../images/drawings/fountainPen/mal.jpeg&#34; alt=&#34;Mal&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;../../images/drawings/fountainPen/complicated.jpeg&#34; alt=&#34;Complicated&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;../../images/drawings/fountainPen/bikini.jpeg&#34; alt=&#34;Bikini&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;../../images/drawings/fountainPen/cod.jpeg&#34; alt=&#34;Cod&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;../../images/drawings/fountainPen/drone.jpeg&#34; alt=&#34;Drone&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;../../images/drawings/fountainPen/flower.jpeg&#34; alt=&#34;Flower&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>Monte Carlo Estimation of Pi (GoLang)</title>
      <link>http://tstra.us/code/goPi/</link>
      <pubDate>Sat, 21 May 2016 09:41:33 -0400</pubDate>
      
      <guid>http://tstra.us/code/goPi/</guid>
      <description>&lt;p&gt;&lt;link href=&#34;../../css/prism.css&#34; rel=&#34;stylesheet&#34;/&gt;
&lt;script src=&#34;../../scripts/prism.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;This program uses goroutines to calculate a Monte Carlo estimation of Pi. It randomly generates points and them checks if its inside the circle. The proportion of the points inside and the total points is then used to estimate Pi.&lt;/p&gt;

&lt;p&gt;On an Intel 3770k, it accurately estimates Pi to 4 decimal digits using 1 trillion random points in just over 5 seconds.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;math&amp;quot;
    &amp;quot;math/rand&amp;quot;
    &amp;quot;os&amp;quot;
    &amp;quot;runtime&amp;quot;
    &amp;quot;strconv&amp;quot;
    &amp;quot;sync&amp;quot;
    &amp;quot;time&amp;quot;
)

func monte_carlo_pi(radius float64, reps int, result *int, wait *sync.WaitGroup) {
    var x, y float64
    count := 0
    seed := rand.NewSource(time.Now().UnixNano())
    random := rand.New(seed)

    for i := 0; i &amp;lt; reps; i++ {
        x = random.Float64() * radius
        y = random.Float64() * radius

        if num := math.Sqrt(x*x + y*y); num &amp;lt; radius {
            count++
        }
    }

    *result = count
    wait.Done()
}

func main() {
    cores := runtime.NumCPU()
    runtime.GOMAXPROCS(cores)

    var wait sync.WaitGroup

    counts := make([]int, cores)

    samples, _ := strconv.Atoi(os.Args[1])

    start := time.Now()
    wait.Add(cores)

    for i := 0; i &amp;lt; cores; i++ {
        go monte_carlo_pi(100.0, samples/cores, &amp;amp;counts[i], &amp;amp;wait)
    }

    wait.Wait()

    total := 0
    for i := 0; i &amp;lt; cores; i++ {
        total += counts[i]
    }

    pi := (float64(total) / float64(samples)) * 4

    fmt.Println(&amp;quot;Time: &amp;quot;, time.Since(start))
    fmt.Println(&amp;quot;pi: &amp;quot;, pi)
    fmt.Println(&amp;quot;&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Water Quality Probe</title>
      <link>http://tstra.us/misc/probe/</link>
      <pubDate>Sat, 21 May 2016 09:38:07 -0400</pubDate>
      
      <guid>http://tstra.us/misc/probe/</guid>
      <description>&lt;p&gt;This water quality probe was mine, and three others, senior project in computer engineering that we worked on during our final year at Elizabethtown College. We meant to produce the probe as simply as possible, more as a proof of concept, instead of proving how small or cheapily the device could be made. Most of the electronics were off-the-shelf parts from &lt;a href=&#34;https://adafruit.com&#34;&gt;Adafruit&lt;/a&gt; and &lt;a href=&#34;https://sparkfun.com&#34;&gt;Sparkfun&lt;/a&gt;, all contained in a 3D-printed casing we designed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../images/waterProbe/Trans.png&#34; alt=&#34;&#34; /&gt;
This render was made by me using SolidWorks to prove that all of the components would fit inside the casing. This was important as both pieces took a combined 14 hours to print on the engineering department&amp;rsquo;s new 3D printer.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;../../images/waterProbe/Proto.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;But before all of that we had do acquire, test, and program our components.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- Arduino Nano
- Micro SD breakout (Adafruit)
- CC3000 WiFi breakout (Adafruit)
- DS1307 Real Time Clock breakout (Adafruit)
- DHT22 Air Temperature and Humidity
- pH Sensor Kit (Atlas Scientific)
- Dallas One-Wire Waterproof Temperature Sensor
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;../../images/waterProbe/Battery.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Our power system thanks to a massive LiPo battery and some efficient code could power the system for almost a full month non stop while taking readings every 15 minutes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- 6000mAh 3.7V Lithium Polymer Battery (Sparkfun)
- USB Charger with passthrough (Sparkfun)
- 3.3V -&amp;gt; 5V Voltage Booster/Regulator
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;../../images/waterProbe/Board.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After testing, it took some creative soldering to fit all of the components onto a 6cm X 8cm prototype PCB.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;../../images/waterProbe/Top.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Full render of the insides with the lid removed. Yeah&amp;hellip; I spent way to much time on that&amp;hellip;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;../../images/waterProbe/Shell.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Casing moments after its printing was completed. Afterwards it was lightly sanded and then sealed with several coats of acrylic sealer for water proofing. The sensors in the bottom and the lid we water sealed with silicone.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Random Mythbusters Episode Generator</title>
      <link>http://tstra.us/misc/randomMythbusters/</link>
      <pubDate>Sat, 21 May 2016 09:33:41 -0400</pubDate>
      
      <guid>http://tstra.us/misc/randomMythbusters/</guid>
      <description>&lt;p&gt;&lt;button class=&#34;pure-button&#34; onclick=&#34;generateEpisode()&#34;&gt;Generate&lt;/button&gt;
&lt;label for=&#34;all&#34; class=&#34;pure-radio&#34;&gt;
    &lt;input id=&#34;all&#34; type=&#34;radio&#34; name=&#34;optionsRadios&#34; value=&#34;all&#34; checked&gt;
        All episodes
&lt;/label&gt;
&lt;label for=&#34;hulu&#34; class=&#34;pure-radio&#34;&gt;
    &lt;input id=&#34;hulu&#34; type=&#34;radio&#34; name=&#34;optionsRadios&#34; value=&#34;hulu&#34;&gt;
        Hulu only
&lt;/label&gt;
&lt;h4 class=&#34;ouput&#34; id=&#34;output&#34;&gt;&lt;/h4&gt;&lt;/p&gt;

&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;http://yui.yahooapis.com/pure/0.6.0/pure-min.css&#34;&gt;&lt;/p&gt;

&lt;script src=&#34;../../scripts/randomMythbusters.js&#34; type=&#34;text/javascript&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Random Top Gear UK Episode Generator</title>
      <link>http://tstra.us/misc/randomTopGear/</link>
      <pubDate>Sat, 21 May 2016 09:30:29 -0400</pubDate>
      
      <guid>http://tstra.us/misc/randomTopGear/</guid>
      <description>&lt;p&gt;&lt;button class=&#34;pure-button&#34; onclick=&#34;generateEpisode()&#34;&gt;Generate&lt;/button&gt;
&lt;label for=&#34;all&#34; class=&#34;pure-radio&#34;&gt;
    &lt;input id=&#34;all&#34; type=&#34;radio&#34; name=&#34;optionsRadios&#34; value=&#34;all&#34; checked&gt;
        All episodes
&lt;/label&gt;
&lt;label for=&#34;hulu&#34; class=&#34;pure-radio&#34;&gt;
    &lt;input id=&#34;hulu&#34; type=&#34;radio&#34; name=&#34;optionsRadios&#34; value=&#34;hulu&#34;&gt;
        Hulu only
&lt;/label&gt;
&lt;label for=&#34;netflix&#34; class=&#34;pure-radio&#34;&gt;
    &lt;input id=&#34;netflix&#34; type=&#34;radio&#34; name=&#34;optionsRadios&#34; value=&#34;netflix&#34;&gt;
        Netflix only
&lt;/label&gt;
&lt;h4 class=&#34;ouput&#34; id=&#34;output&#34;&gt;&lt;/h4&gt;&lt;/p&gt;

&lt;p&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;http://yui.yahooapis.com/pure/0.6.0/pure-min.css&#34;&gt;&lt;/p&gt;

&lt;script src=&#34;../../scripts/randomTopGear.js&#34; type=&#34;text/javascript&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Poodles (Poop Doodles)</title>
      <link>http://tstra.us/drawings/poodles/</link>
      <pubDate>Sat, 21 May 2016 09:15:18 -0400</pubDate>
      
      <guid>http://tstra.us/drawings/poodles/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;../../images/drawings/poodles/Poodle6.jpeg&#34; alt=&#34;Poodles6&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;../../images/drawings/poodles/Poodle4.jpeg&#34; alt=&#34;Poodle4&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;../../images/drawings/poodles/Poodle8.jpeg&#34; alt=&#34;Poodle8&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;../../images/drawings/poodles/Poodle3.jpeg&#34; alt=&#34;Poodle3&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;../../images/drawings/poodles/Poodle5.jpeg&#34; alt=&#34;Poodle5&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;../../images/drawings/poodles/Poodle.jpeg&#34; alt=&#34;Poodle&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;../../images/drawings/poodles/Poodle2.jpeg&#34; alt=&#34;Poodle2&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;../../images/drawings/poodles/Poodle1.jpeg&#34; alt=&#34;Poodle1&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>Mutithreaded Sumation (GoLang)</title>
      <link>http://tstra.us/code/goSum/</link>
      <pubDate>Sat, 21 May 2016 08:41:34 -0400</pubDate>
      
      <guid>http://tstra.us/code/goSum/</guid>
      <description>&lt;p&gt;&lt;link href=&#34;../../css/prism.css&#34; rel=&#34;stylesheet&#34;/&gt;
&lt;script src=&#34;../../scripts/prism.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;This was my first attempt to write something that uses the simplicity of threading in Go using goroutines. The number of threads is determined in the program and the run time is calculated.&lt;/p&gt;

&lt;p&gt;The performance of Go is really shown off when I compared the times to a similar single threaded program written in Python. For the sum of 1 through 1 billion, Python&amp;rsquo;s time was measured in minutes, and Go took less then a 10th of a second.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;sync&amp;quot;
    &amp;quot;time&amp;quot;
    &amp;quot;runtime&amp;quot;
    )

func sum(low int, high int, result *int, wait *sync.WaitGroup) {
    sum := 0

    for i := low; i &amp;lt;= high; i++ {
        sum += i
    }
    //fmt.Println(sum)
    *result = sum
    wait.Done()
}

func main() {
    cores := runtime.NumCPU()
    runtime.GOMAXPROCS(cores)
    //fmt.Println(cores)
    var wait sync.WaitGroup
    subs := make([]int, cores)
    var max int
    min := 1
    /*var min int
    fmt.Scan(&amp;amp;min)*/
    fmt.Scan(&amp;amp;max)
    start := time.Now()
    wait.Add(cores)

    for i := 0; i &amp;lt; cores; i++ {
        go sum(min + (max / cores) * (i), (max / cores) * (i + 1), &amp;amp;subs[i], &amp;amp;wait)
        fmt.Println(&amp;quot;go started&amp;quot;)
    }

    wait.Wait()
    var sum int

    for i := 0; i &amp;lt; cores; i++ {
        sum += subs[i]
    }
    fmt.Println(sum)
    fmt.Println(time.Since(start))
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>HTML Link Grabber (GoLang)</title>
      <link>http://tstra.us/code/goLinkGrabber/</link>
      <pubDate>Sat, 21 May 2016 08:41:33 -0400</pubDate>
      
      <guid>http://tstra.us/code/goLinkGrabber/</guid>
      <description>&lt;p&gt;&lt;link href=&#34;../../css/prism.css&#34; rel=&#34;stylesheet&#34;/&gt;
&lt;script src=&#34;../../scripts/prism.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;This program takes in a web address as a command line argument. Then goes and gets that page and then prints out all of the links to other pages. While not all that useful, it was a good first step into web programming.&lt;/p&gt;

&lt;p&gt;Credit for this goes to Jack Canty&amp;rsquo;s website because I&amp;rsquo;ve never written anything like this. His can be found &lt;a href=&#34;https://jdanger.com/build-a-web-crawler-in-go.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main
import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;flag&amp;quot;
    &amp;quot;net/http&amp;quot;
    &amp;quot;os&amp;quot;
    &amp;quot;io&amp;quot;
    &amp;quot;golang.org/x/net/html&amp;quot;
)

func main() {
    flag.Parse()
    arg := flag.Args()
    fmt.Println(arg)

    if len(arg) == 0 {
        fmt.Printf(&amp;quot;Enter a page\nex. \&amp;quot;http://google.com\&amp;quot;&amp;quot;)
        os.Exit(1)
    }

    data, error := http.Get(arg[0])   
    if error != nil {
        return
    }
    defer data.Body.Close()
    links := collectLinks(data.Body)

    for _, link := range(links) {
        fmt.Printf(&amp;quot;\t&amp;quot;)
        fmt.Println(link)
    }
}

func collectLinks(httpBody io.Reader) []string {
    links := make([]string, 0)
    page := html.NewTokenizer(httpBody)
    for {
        tokenType := page.Next()
        if tokenType == html.ErrorToken {
            return links
        }
        token := page.Token()
        if tokenType == html.StartTagToken &amp;amp;&amp;amp; token.DataAtom.String() == &amp;quot;a&amp;quot; {
            for _, attr := range token.Attr {
                if attr.Key == &amp;quot;href&amp;quot; {
                    links = append(links, attr.Val)
                }
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Drawings From Class</title>
      <link>http://tstra.us/drawings/drawingsFromClass/</link>
      <pubDate>Wed, 18 May 2016 18:29:56 -0400</pubDate>
      
      <guid>http://tstra.us/drawings/drawingsFromClass/</guid>
      <description>&lt;p&gt;These are a few of my drawings from my classes while at Elizabethtown College, taught by Jeff Geib.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../images/drawings/Skeleton1.jpg&#34; alt=&#34;Skeleton1&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;../../images/drawings/Face.jpg&#34; alt=&#34;Face&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;../../images/drawings/Body.jpg&#34; alt=&#34;Body&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;../../images/drawings/Skeleton2.jpg&#34; alt=&#34;Skeleton2&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;../../images/drawings/Woody.jpg&#34; alt=&#34;Woody&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;../../images/drawings/Fork.jpg&#34; alt=&#34;Fork&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;../../images/drawings/Cock.jpg&#34; alt=&#34;Cock&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&#34;../../images/drawings/Fish.jpg&#34; alt=&#34;Fish&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Resume</title>
      <link>http://tstra.us/resume/</link>
      <pubDate>Wed, 18 May 2016 18:07:35 -0400</pubDate>
      
      <guid>http://tstra.us/resume/</guid>
      <description>

&lt;h1 id=&#34;tucker-strausbaugh&#34;&gt;Tucker Strausbaugh&lt;/h1&gt;

&lt;h2 id=&#34;strausbaught-etown-edu&#34;&gt;strausbaught@etown.edu&lt;/h2&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;education&#34;&gt;Education&lt;/h3&gt;

&lt;h4 id=&#34;elizabethtown-college-may-2015-elizabethtown-pa&#34;&gt;Elizabethtown College: May 2015 - Elizabethtown, PA&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Bachelor of Science in Computer Engineering, ABET accredited&lt;/li&gt;
&lt;li&gt;GPA Overall: 3.32, Major: 3.39&lt;/li&gt;
&lt;li&gt;Dean&amp;rsquo;s List in Fall 2013 and Spring 2015&lt;/li&gt;
&lt;li&gt;2013 Faculty Service Award in Engineering &amp;amp; Physics&lt;/li&gt;
&lt;li&gt;Member of Sigma Pi Sigma, National Physics Honors Society&lt;/li&gt;
&lt;li&gt;Member of the Order of the Engineer&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;spring-grove-area-high-school-june-2011-spring-grove-pa&#34;&gt;Spring Grove Area High School: June 2011 - Spring Grove, PA&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;GPA: 3.49&lt;/li&gt;
&lt;li&gt;Advanced Placement in Chemistry and Physics&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;relevant-coursework&#34;&gt;Relevant Coursework&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Computer Science I &amp;amp; II Java&lt;/strong&gt; (CS 121 &amp;amp; 122) - loops, sorting, pointers, GUI&amp;rsquo;s, recursion, threads&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Physics I, II, &amp;amp; III&lt;/strong&gt; (PHY 200, 201, and 202) - calculus based mechanics, kinematics, dynamics, electricity, magnetism, waves, fluids, thermodynamics, and optics&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Calculus I, II, &amp;amp; III&lt;/strong&gt; (MA 121, 122, &amp;amp; 222) - differential and integral calculus (in 2D and 3D using plane, parametric, and polar coordinates), series and sequences, and multivariable calculus&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Differential Equations&lt;/strong&gt; (MA 321) - matrix algebra, complex plane, Laplace Transform, Fourier series and Transform&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Circuit Analysis &amp;amp; Electronics&lt;/strong&gt; (EGR 210 &amp;amp; 220) - linear, DC, AC, and transient analysis for circuits including resistors, capacitors, inductors, op-amps, diodes, transitors, MOSFETs&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Computer Organization and Architecture&lt;/strong&gt; (EGR 332) - Boolean algebra, designing sequential and combinational circuits, and studying basic requirements of computer systems&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Digital Circuits and Computer Interfacing&lt;/strong&gt; (EGR 333) - design of logic and integrated circuits, programming in machine language, worked with TTL chips, PLC&amp;rsquo;s, FPGA&amp;rsquo;s, and 8051 microcontrollers&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Signals and Systems &amp;amp; Control Systems&lt;/strong&gt; (EGR 310 &amp;amp; 410) - differential, Fourier, Laplace, discrete analysis; design, analysis, and simulation of control systems as well as performance analysis&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Green Robotics, Automation, and Machine Intelligence&lt;/strong&gt; (EGR 434) - artificial neural networks, robotic arm design, rapid adaptation to situations that can&amp;rsquo;t be defined with equations, real- time control, and path-planning&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Systems Programming&lt;/strong&gt; (CS 222) - dynamic data structures, memory allocation, interrupts in C&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Compiler Design&lt;/strong&gt; (CS 421) - compilers, interpreters, code optimization, and assemblers&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Operating Systems&lt;/strong&gt; (CS 422) - resource allocation, interrupts, scheduling, drivers, and files&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advanced Computer Engineering&lt;/strong&gt; (EGR 433) - circuit-level design and implementation of complete computer systems, lectures on microcontroller, processor, and neural network design&lt;/p&gt;

&lt;h3 id=&#34;experience&#34;&gt;Experience&lt;/h3&gt;

&lt;h4 id=&#34;rg-group-electrical-engineering-intern-and-electronics-technician-summer-2014&#34;&gt;RG Group: Electrical Engineering Intern and Electronics Technician - Summer 2014&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Assisted with design, calibration, production methods, and manufacturing of the TOMI SteraMist decontamination system.&lt;/li&gt;
&lt;li&gt;Troubleshooting legacy control systems and circuit boards in order to upgrade.&lt;/li&gt;
&lt;li&gt;Vaporized Hydrogen Peroxide and then applied a high voltage to the spray to transform it into a Reactive Oxygen Species. This causes cellular disruption of harmful organisms.&lt;/li&gt;
&lt;li&gt;Designed for sterilization use in the medical industry.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;engineering-projects&#34;&gt;Engineering Projects&lt;/h3&gt;

&lt;h4 id=&#34;16-bit-computer-architecture&#34;&gt;16-Bit Computer Architecture&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Designed a simple programmable 16-bit architecture and memory system.&lt;/li&gt;
&lt;li&gt;Fully documented in report and presented to ABET during reaccreditation.&lt;/li&gt;
&lt;li&gt;Later wrote an assembler to make programing much faster and simpler.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;wireless-water-quality-probe&#34;&gt;Wireless Water Quality Probe&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Uses dissolved oxygen, Ph level, and temperature sensors to gather long-term data on a body of water, casing designed in SolidWorks then 3D printed.&lt;/li&gt;
&lt;li&gt;Uses Wi-Fi to upload data to webserver for easy data retrieval.&lt;/li&gt;
&lt;li&gt;Weatherproof to withstand long term environmental data.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;skills&#34;&gt;Skills&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Experience programming in C, C++, Java, x86 and 8051 Assembly, Mathematica, and MATLAB&lt;/li&gt;
&lt;li&gt;In depth knowledge of SolidWorks, Eclipse, C, Logisim, Python, Microsoft Excel, Microsoft Word, Microsoft PowerPoint, Phoenix Contact and Siemens PLC&amp;rsquo;s&lt;/li&gt;
&lt;li&gt;Experience with Inventor, Spice, Ladder Logic, FPGA&amp;rsquo;s, circuit prototyping, Solid Edge&lt;/li&gt;
&lt;li&gt;Great time management, teamwork, leadership skills, and a hunger to learn&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;personal-activities&#34;&gt;Personal Activities&lt;/h3&gt;

&lt;h4 id=&#34;college&#34;&gt;College&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Vice President of Elizabethtown College&amp;rsquo;s Robotics and Machine Intelligence Club. Constructing a competitive land robot with full image processing.&lt;/li&gt;
&lt;li&gt;Mentor in the Elizabethtown Public Library S.T.E.M. Xplorer&amp;rsquo;s Club, an after school youth science education club. Competes in the annual SeaPerch robot competition.&lt;/li&gt;
&lt;li&gt;Personal projects with Arduino and Atmel microcontrollers. Many of these led into the design of the Water Quality Probe.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;high-school&#34;&gt;High School&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Section and Student Leader in Spring Grove&amp;rsquo;s Marching Band and Drumline.&lt;/li&gt;
&lt;li&gt;Member of Students Against Destructive Decisions (S.A.D.D.) for all four years.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;

&lt;h4 id=&#34;dr-joseph-wunderlich&#34;&gt;Dr. Joseph Wunderlich&lt;/h4&gt;

&lt;p&gt;Assoc. Professor and Associate Chair of Engineering Elizabethtown College
(717) 368-9715, wunderjt@etown.edu&lt;/p&gt;

&lt;h4 id=&#34;ed-stum&#34;&gt;Ed Stum&lt;/h4&gt;

&lt;p&gt;Vice President &amp;amp; General Manager Manufacturing RG Group
(717) 849-0399, ed.stum@rg-group.com&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;../files/Resume.pdf&#34;&gt;PDF Version&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://tstra.us/about/</link>
      <pubDate>Mon, 16 May 2016 20:58:49 -0400</pubDate>
      
      <guid>http://tstra.us/about/</guid>
      <description>

&lt;h4 id=&#34;computer-engineer-cat&#34;&gt;Computer Engineer - Cat?&lt;/h4&gt;

&lt;p&gt;Hi, I&amp;rsquo;m Tucker. I&amp;rsquo;m from south central Pennsylvania, where I went to high school in Spring Grove and was the section leader of the drumline and earned the name Tuckles. Recently I graduated from Elizabethtown College with a B.S. in Computer Engineering. Now I&amp;rsquo;ve moved to Lexington Park and work with NAVAIR.&lt;/p&gt;

&lt;h4 id=&#34;hobbies&#34;&gt;Hobbies&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Various electronics and programming projects&lt;/li&gt;
&lt;li&gt;Drawing and Photography&lt;/li&gt;
&lt;li&gt;Learning C++, Go, web development, and Python&lt;/li&gt;
&lt;li&gt;Learning electric guitar and bass&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;interests&#34;&gt;Interests&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Jennie&lt;/li&gt;
&lt;li&gt;PC Gaming (Starcraft, GTA, and League of Legends)&lt;/li&gt;
&lt;li&gt;Music&lt;/li&gt;
&lt;li&gt;Cars, driving&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>